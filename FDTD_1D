"""
Created on Fri Jun  4 19:36:36 2021
@author: FDTD 1D by MJLU
"""
import numpy as np
from matplotlib import pyplot as plt
from tqdm import tqdm
import pdb


#  Define initial constants
eps_0 = 8.854187817e-12;          # permittivity of free space  
mu_0  = 4*np.pi*1e-7;                # permeability of free space    
c     = 1/np.sqrt(mu_0*eps_0);       # speed of light 

# Define problem geometry and parameters
domain_size = 1;                  # 1D problem space length in meters
dx = 1e-3;                        # cell size in meters   
dt = 3e-12;                       # duration of time step in seconds  
number_of_time_steps = 10000;      # number of iterations 
nx = int(np.round(domain_size/dx));       # number of cells in 1D problem space
source_position = 0.5;            # position of the current source Jz

# Initialize field and material arrays
Ceze      = np.zeros((nx+1,1));
Cezhy     = np.zeros((nx+1,1));
Cezj      = np.zeros((nx+1,1));
Ez        = np.zeros((nx+1,1));
Jz        = np.zeros((nx+1,1));
eps_r_z   = np.ones ((nx+1,1)); # free space
sigma_e_z = np.zeros((nx+1,1)); # free space

Chyh      = np.zeros((nx,1));
Chyez     = np.zeros((nx,1));
Chym      = np.zeros((nx,1));
Hy        = np.zeros((nx,1));
My        = np.zeros((nx,1));
mu_r_y    = np.ones((nx,1)); # free space
sigma_m_y = np.zeros((nx,1)); # free space

# Calculate FDTD updating coefficients 
Ceze = (2 * eps_r_z * eps_0 - dt * sigma_e_z)/(2 * eps_r_z * eps_0 + dt * sigma_e_z);
Cezhy = (2 * dt / dx)/(2 * eps_r_z * eps_0 + dt * sigma_e_z);
Cezj  = (-2 * dt)/(2 * eps_r_z * eps_0 + dt * sigma_e_z);
Chyh  = (2 * mu_r_y * mu_0 - dt * sigma_m_y)/(2 * mu_r_y * mu_0 + dt * sigma_m_y);
Chyez = (2 * dt / dx)/(2 * mu_r_y * mu_0 + dt * sigma_m_y);
Chym  = (-2 * dt)/(2 * mu_r_y * mu_0 + dt * sigma_m_y);

# Define the Gaussian source waveform 
t = np.arange(0,number_of_time_steps,1)
time       = dt*t;
Jz_waveform = np.exp(-((time-2e-10)/5e-11)**2);
source_position_index = int(np.round(nx*source_position/domain_size)+1);

# FDTD loop
for time_step in tqdm(range(number_of_time_steps)):
    
    Jz[source_position_index] = Jz_waveform[time_step]
    
    for i in range(nx):
        Hy[i] = Chyh[i]*Hy[i] + Chyez[i] * (Ez[i+1] - Ez[i])  + Chym[i] * My[i];
    
    for j in range(1,nx-1):
        Ez[j+1] = Ceze[j+1] *  Ez[j+1] + Cezhy[j+1] * (Hy[j+1] - Hy[j]) + Cezj[j+1] * Jz[j+1];
        #pdb.set_trace() #n completarejecucuion #c sgtelinea
        

    Ez[0]    = 0; # Apply PEC boundary condition at x = 0 m
    Ez[nx] = 0; # Apply PEC boundary condition at x = 1 m

x = np.linspace(0,1,nx+1)
plt.plot(x,Ez)
plt.show

